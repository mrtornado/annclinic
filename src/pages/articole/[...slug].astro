---
import { getCollection, type CollectionEntry } from "astro:content";
import ArticleLayout from "../../layouts/ArticleLayout.astro";

export async function getStaticPaths() {
  const articles = await getCollection("articles");
  return articles.map((article) => ({
    params: { slug: article.slug },
    props: { article },
  }));
}

interface Props {
  article: CollectionEntry<"articles">;
}

const { article } = Astro.props;

// Get related articles based on specialty and tags
const allArticles = await getCollection("articles");
const relatedArticles = allArticles
  .filter(
    (a) =>
      a.slug !== article.slug &&
      (a.data.specialty === article.data.specialty ||
        a.data.tags.some((tag) => article.data.tags.includes(tag)))
  )
  .sort((a, b) => {
    // Prioritize same specialty
    const aSpecialtyMatch = a.data.specialty === article.data.specialty ? 1 : 0;
    const bSpecialtyMatch = b.data.specialty === article.data.specialty ? 1 : 0;

    if (aSpecialtyMatch !== bSpecialtyMatch) {
      return bSpecialtyMatch - aSpecialtyMatch;
    }

    // Then by tag overlap
    const aTagOverlap = a.data.tags.filter((tag) =>
      article.data.tags.includes(tag)
    ).length;
    const bTagOverlap = b.data.tags.filter((tag) =>
      article.data.tags.includes(tag)
    ).length;

    if (aTagOverlap !== bTagOverlap) {
      return bTagOverlap - aTagOverlap;
    }

    // Finally by publish date (newest first)
    return (
      new Date(b.data.publishDate).getTime() -
      new Date(a.data.publishDate).getTime()
    );
  })
  .slice(0, 6); // Limit to 6 related articles
---

<ArticleLayout article={article} relatedArticles={relatedArticles} />
